/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type Socials = {
  _id: string;
  _type: "socials";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  link?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: BlockContent;
  bottomLink?: string;
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  aboutSections?: Array<{
    subtitle?: string;
    body?: BlockContent;
    _type: "section";
    _key: string;
  }>;
  bottomLink?: string;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  body?: BlockContent;
  bottomLink?: string;
};

export type ProjectsPage = {
  _id: string;
  _type: "Projects-Page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  projects?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "projects";
  }>;
  bottomLink?: string;
};

export type Projects = {
  _id: string;
  _type: "projects";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  body?: BlockContent;
  tags?: Array<string>;
  github?: string;
  demo?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BlockContent | Socials | Contact | About | Home | ProjectsPage | Projects | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../next-portfolio/src/app/page.tsx
// Variable: HOME_QUERY
// Query: *[_type == "home"]{title,body,bottomLink,}
export type HOME_QUERYResult = Array<{
  title: string | null;
  body: BlockContent | null;
  bottomLink: string | null;
}>;

// Source: ../next-portfolio/src/app/about/page.tsx
// Variable: ABOUT_QUERY
// Query: *[_type == "about"]{title,aboutSections,bottomLink}
export type ABOUT_QUERYResult = Array<{
  title: string | null;
  aboutSections: Array<{
    subtitle?: string;
    body?: BlockContent;
    _type: "section";
    _key: string;
  }> | null;
  bottomLink: string | null;
}>;

// Source: ../next-portfolio/src/app/contact/page.tsx
// Variable: CONTACT_QUERY
// Query: *[_type == "contact"]{title,body,bottomLink}
export type CONTACT_QUERYResult = Array<{
  title: string | null;
  body: BlockContent | null;
  bottomLink: string | null;
}>;

// Source: ../next-portfolio/src/app/projects/page.tsx
// Variable: PROJECTS_QUERY
// Query: *[_type == "Projects-Page"]{title,bottomLink,projects[]->{_id,title,slug,tags,github,demo,body,image}}
export type PROJECTS_QUERYResult = Array<{
  title: string | null;
  bottomLink: string | null;
  projects: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    tags: Array<string> | null;
    github: string | null;
    demo: string | null;
    body: BlockContent | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
}>;

// Source: ../next-portfolio/src/components/custom/socialLinks.tsx
// Variable: SOCIALS_QUERY
// Query: *[_type == "socials"]{_id,title,link,icon}
export type SOCIALS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  link: string | null;
  icon: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"home\"]{title,body,bottomLink,}": HOME_QUERYResult;
    "*[_type == \"about\"]{title,aboutSections,bottomLink}": ABOUT_QUERYResult;
    "*[_type == \"contact\"]{title,body,bottomLink}": CONTACT_QUERYResult;
    "*[_type == \"Projects-Page\"]{title,bottomLink,projects[]->{_id,title,slug,tags,github,demo,body,image}}": PROJECTS_QUERYResult;
    "*[_type == \"socials\"]{_id,title,link,icon}": SOCIALS_QUERYResult;
  }
}
